diff --git a/webapp/graphite/database.py b/webapp/graphite/database.py
new file mode 100644
index 0000000..fbbe61f
--- /dev/null
+++ b/webapp/graphite/database.py
@@ -0,0 +1,9 @@
+from graphite.util import PluginRegistrar
+
+class GraphiteDatabase(object):
+  "Abstract base class for Carbon database backends"
+  __metaclass__ = PluginRegistrar
+  plugins = {}
+
+  def finder(self):
+    raise NotImplemented()
--- a/webapp/graphite/storage.py
+++ b/webapp/graphite/storage.py
@@ -6,7 +6,8 @@ from graphite.remote_storage import RemoteStore
 from graphite.node import LeafNode
 from graphite.intervals import Interval, IntervalSet
 from graphite.readers import MultiReader
-from graphite.finders import CeresFinder, StandardFinder
+from graphite.finders import StandardFinder
+from graphite.database import GraphiteDatabase
 
 
 class Store:
@@ -147,8 +148,27 @@ class FindQuery:
 
 
 # Exposed Storage API
-finders = [
-  CeresFinder(settings.CERES_DIR),
-  StandardFinder(settings.STANDARD_DIRS),
-]
+finders = []
+
+# Import configured storage plugin
+db = settings.GRAPHITE_DATABASE
+db_plugin = settings.GRAPHITE_DATABASE_PLUGIN
+
+if db_plugin is not None:
+  try:
+    import importlib
+    i = importlib.import_module(db_plugin)
+  except ImportError as e:
+    raise Exception("No database plugin class found for plugin '%s'. %s" % (db_plugin, str(e)))
+
+# Database-specific settings
+if db not in GraphiteDatabase.plugins:
+  raise Exception("No database plugin implemented for '%s'" % db)
+
+DatabasePlugin = GraphiteDatabase.plugins[db]
+database = DatabasePlugin(settings)
+
+finders.append(database.finder)
+finders.append(StandardFinder(settings.STANDARD_DIRS))
+
 STORE = Store(finders, hosts=settings.CLUSTER_SERVERS)
diff --git a/webapp/graphite/util.py b/webapp/graphite/util.py
index fbc1de8..7563f44 100644
--- a/webapp/graphite/util.py
+++ b/webapp/graphite/util.py
@@ -125,6 +129,17 @@ if not environ.get('READTHEDOCS'):
     defaultProfile = Profile(user=defaultUser)
     defaultProfile.save()
 
+class PluginRegistrar(type):
+  """Clever subclass detection hack that makes plugin loading trivial.
+  To use this, define an abstract base class for plugin implementations
+  that defines the plugin API. Give that base class a __metaclass__ of
+  PluginRegistrar, and define a 'plugins = {}' class member. Subclasses
+  defining a 'plugin_name' member will then appear in the plugins dict.
+  """
+  def __init__(classObj, name, bases, members):
+    super(PluginRegistrar, classObj).__init__(name, bases, members)
+    if hasattr(classObj, 'plugin_name'):
+      classObj.plugins[classObj.plugin_name] = classObj
 
 def load_module(module_path, member=None):
   module_name = splitext(basename(module_path))[0]
